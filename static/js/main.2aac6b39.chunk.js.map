{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","switchText","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","background","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","replace","b","camelCase","toCopy","document","getElementById","select","navigator","clipboard","writeText","split","length","prototype","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setmode","_useState3","_useState4","setswitchText","_useState5","_useState6","setAlert","message","setTimeout","Fragment","body","backgroundColor","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.2aac6b39.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar (props){\r\n\r\n        // <..................IMPORTANT.............................>\r\n// I commented out the Roter part from the whole app so that i can easily deploy on git pages\r\n\r\n\r\n    return(\r\n            // Inserting Navbar using Bootstrap\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                 {/* //by adding the {} the inside text converted to javascript and by adding ` ` the text converted to string  */}\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a> \r\n                {/* Link tag used for React router dom to navigate to another page */}\r\n\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\" >Home</Link> */}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\" >Home</a>\r\n                    {/* Link tag used for React router dom to navigate to another page */}\r\n \r\n                    </li>\r\n\r\n                    {/*<li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                    {/* Link tag used for React router dom to navigate to another page \r\n\r\n                    </li> */}\r\n                    </ul>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    {/* //by adding the {} the inside text converted to javascript and by adding ` ` the text converted to string  */}\r\n                    {/*  props.mode==='light'?'dark':'light'  --> short form of using if-else, suppose if a =2 then a+1 else a we have to write this so we will write it like a===2 ? a+1 : a } */}\r\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.switchText}</label>\r\n                </div>\r\n            </div>\r\n            </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype ={\r\n    title : PropTypes.string.isRequired, //we use isRequired when we something is compulsary , so if we don't pass the title it will give an error\r\n    //see below we have used defaultProps so when the title is not given no error will come despite of usin isRequired as we have used defaultProps so it sets the props if it is not available\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set a Title here',\r\n    aboutText: 'About'\r\n}","\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function TextForm(props){\r\n\r\n    // <..................IMPORTANT.............................>\r\n// I commented out the Roter part from the whole app so that i can easily deploy on git pages\r\n\r\n    const UppercaseClicked = ()=>{\r\n        // console.log(\"Uppercase is clicked\");\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const LowercaseClicked = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClear = () =>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n\r\n    function camelCase(text) { // This funciton is taken from the internet to convert to camel case (nahi smjha to bhi chalega)\r\n        // var a = text; (: regex is being used here)\r\n        return text\r\n            .replace(/\\s(.)/g, function(a) {\r\n                return a.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, '')\r\n            .replace(/^(.)/, function(b) {\r\n                return b.toLowerCase();\r\n            });\r\n\r\n    }\r\n\r\n    const handleCamelCase =()=>{\r\n        setText(camelCase(text));\r\n        props.showAlert(\"Converted to CamelCase\", \"success\");\r\n    }\r\n\r\n    const handleCopy =() => {\r\n\r\n        //The below three lines (the functions and methods) taken from the internet , they copy the text\r\n\r\n        var toCopy = document.getElementById('myBox');\r\n        toCopy.select();\r\n        navigator.clipboard.writeText(toCopy.value);\r\n\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        //Taken from the internet to remove extra spaces\r\n        var newText = text.replace(/\\s+/g,' ');\r\n        setText(newText)\r\n\r\n        props.showAlert(\"Exta Spaces Removed\", \"success\");\r\n    }\r\n    const handleOnChange=(event) =>{ //when we use onChange attribute(used in textarea tag) by default an event is generated\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value); // it will append the new text we write to the old \"text\" value that was there\r\n    }\r\n\r\n\r\n    // State hooks example -->\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    // text = ('new text'); //Wrong way to change the state\r\n    // setText('new text'); //Correct way to change the state\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">          \r\n            <textarea className=\"form-control\" style={{background: props.mode==='dark'?'#00003f':'white', color:props.mode=== 'dark'?'white': 'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea> \r\n            {/* onChange will be used in textarea tag not in button */}\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={UppercaseClicked}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={LowercaseClicked}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCamelCase}>Convert to CamelCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container mt-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Analytics</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n{/* \r\n            text.split(\" \") will return an array having all the words , as soon as one hits space the letters before the space \" \" is made into one element of that array , so all the words are stored as elements and when we do .length it tells the elements in the array i.e the no of words  */}\r\n            <p>It will take approx. { 0.003 * text.split(\" \").length } minutes to read the text</p> \r\n            {/* 0.03 minutes is the average reading time for one word */}\r\n            \r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : 'Enter something in the textbox to be previewed here'}</p> \r\n            {/* When nothing is wirtten on the textbox this is shown */}\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nfunction Alert(props){\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1) \r\n        //charAt(0) takes the first letter of the string low (our message is inside the string low and we made all the letters lowercase first)\r\n        //then to Uppercase capitalizes the character at 0 that is the first letter\r\n        //then we add the remaining letters of the word , low.slice(1) show the all the characters of the word removing 1 ie the first letter\r\n    }\r\n\r\n    return(\r\n        //Adding the alert box from bootstrap \r\n        // the alert box has 4 types (succes, warning etc.) see bootstrap for this \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n\r\n        {/* Use this syntax , the community prefers it\r\n        If props.alert is null then the code written after \"&&\" won’t be shown otherwise the code inside <div></div> tag will be displayed.\r\n\r\n        Props.alert && ………….\r\n\r\n        Use this format , this means that if props.alert has some value then the code written after \"&&\" will execute otherwise it will not */}\r\n\r\n\r\n        {/* Here when the word \"success\" comes in the alert , remember success is a bootstrap class see above we have used ${props.alert.type} for putting only, so because of that the first letter of the word S is not capital to capitalize it i have written a funtion above return  */}\r\n        \r\n        {/* // Removing the button to close the alert because we are adding a timer and the button will close automatically */}\r\n\r\n        {/* <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport Alert from './components/Alert'\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n// <..................IMPORTANT.............................>\n// I commented out the Roter part from the whole app so that i can easily deploy on git pages\n\n\nfunction App() {\n\n  \n  const [mode, setmode] = useState('light');\n\n  const [switchText, setswitchText] = useState('Light Mode')\n\n  const [alert, setAlert] = useState(null)\n\n\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg: message,\n      type:type,\n    })\n\n    setTimeout( ()=>{\n      setAlert(null)\n    },1500) //through setTimeout the alert box will close after 1500 ms or 1.5ms\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setmode('dark');\n      document.body.style.backgroundColor = '#00003f'; //to change the background color\n      setswitchText('Dark Mode');\n      \n      showAlert(\"Dark mode has been enabled\", \"success\") \n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      setswitchText('Light Mode')\n\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n  }\n\n  return (\n  <>\n    {/* <Router> */}\n      {/* <Navbar title = \"Text-Utils\" /> */}\n      <Navbar title = \"TextUtils\" mode={mode} toggleMode={toggleMode} switchText={switchText}/> \n        {/* making a prop mode and adding the state mode we made above , and same for toggleMode creating a prop to call the function togglemode above */}\n\n      <div className=\"container my-3\">\n      <Alert alert = {alert}/>\n        {/* <Routes> */}\n          {/* <Route exact path=\"/\" element={<TextForm  heading =\"Enter the text to be analyzed\" mode={mode} showAlert={showAlert}/>}/> */}\n{/* \n          I have commented the React router part so that i can deploy easily on github pages \n          so writing the TextForm part here below again */}\n          <TextForm  heading =\"Enter the text to be analyzed\" mode={mode} showAlert={showAlert}/>\n          {/* adding showAlert to every button see above */}\n          {/* <Route exact path=\"/about\" element={<About />}/> */}\n        {/* </Routes> */}\n    \n      </div>\n    {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}